(() => {
  'use strict';
  const t = '___',
    n = {};
  const r = function (t) {
    for (var n, r = 0, e = 0, o = t.length; o >= 4; ++e, o -= 4)
      (n =
        1540483477 *
          (65535 &
            (n =
              (255 & t.charCodeAt(e)) |
              ((255 & t.charCodeAt(++e)) << 8) |
              ((255 & t.charCodeAt(++e)) << 16) |
              ((255 & t.charCodeAt(++e)) << 24))) +
        ((59797 * (n >>> 16)) << 16)),
        (r =
          (1540483477 * (65535 & (n ^= n >>> 24)) + ((59797 * (n >>> 16)) << 16)) ^
          (1540483477 * (65535 & r) + ((59797 * (r >>> 16)) << 16)));
    switch (o) {
      case 3:
        r ^= (255 & t.charCodeAt(e + 2)) << 16;
      case 2:
        r ^= (255 & t.charCodeAt(e + 1)) << 8;
      case 1:
        r = 1540483477 * (65535 & (r ^= 255 & t.charCodeAt(e))) + ((59797 * (r >>> 16)) << 16);
    }
    return (((r = 1540483477 * (65535 & (r ^= r >>> 13)) + ((59797 * (r >>> 16)) << 16)) ^ (r >>> 15)) >>> 0).toString(
      36,
    );
  };
  function e(n, e) {
    return (
      t +
      (function (t) {
        const n = t.length;
        if (7 === n) return t;
        for (let r = n; r < 7; r++) t += '0';
        return t;
      })(r(n + e))
    );
  }
  function o(t, n) {
    let r = '';
    for (const e in t) {
      const o = t[e];
      if (o) {
        const t = Array.isArray(o);
        r += 'rtl' === n ? (t ? o[1] : o) + ' ' : (t ? o[0] : o) + ' ';
      }
    }
    return r.slice(0, -1);
  }
  function c(t, r) {
    const c = {};
    for (const s in t) {
      const i = o(t[s], r),
        l = e(i, r),
        u = l + ' ' + i;
      (n[l] = [t[s], r]), (c[s] = u);
    }
    return c;
  }
  const s = {},
    i = t.length + 7;
  console.log(
    function (t, n) {
      const r = {};
      let e = null,
        o = null;
      return function (s) {
        const { dir: i, renderer: l } = s,
          u = 'ltr' === i,
          f = u ? l.id : l.id + 'r';
        return (
          u ? null === e && (e = c(t, i)) : null === o && (o = c(t, i)),
          void 0 === r[f] && (l.insertCSSRules(n), (r[f] = !0)),
          u ? e : o
        );
      };
    },
    function () {
      let r = null,
        c = '',
        l = '';
      const u = new Array(arguments.length);
      for (let n = 0; n < arguments.length; n++) {
        const r = arguments[n];
        if ('string' == typeof r) {
          const e = r.indexOf(t);
          if (-1 === e) c += r + ' ';
          else {
            const t = r.substr(e, i);
            e > 0 && (c += r.slice(0, e)), (l += t), (u[n] = t);
          }
          0;
        }
      }
      if ('' === l) return c.slice(0, -1);
      const f = s[l];
      if (void 0 !== f) return c + f;
      const a = [];
      for (let t = 0; t < arguments.length; t++) {
        const e = u[t];
        if (e) {
          const t = n[e];
          t && (a.push(t[0]), (r = t[1]));
        }
      }
      const h = Object.assign.apply(Object, [{}].concat(a));
      let d = o(h, r);
      const g = e(d, r);
      return (d = g + ' ' + d), (s[l] = d), (n[g] = [h, r]), c + d;
    },
  );
})();
