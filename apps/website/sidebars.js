// @ts-check

const path = require('path');
const fs = require('fs');
const babel = require('@babel/core');

function generateTryItOutSidebar() {
  const playgroundTemplatePath = path.join(__dirname, '/src/components/Playground/code/templates');
  const templateFiles = fs.readdirSync(playgroundTemplatePath).filter(filename => filename !== 'app.js');
  return templateFiles
    .map(templateFile => {
      const id = path.parse(templateFile).name;
      const templatePath = path.join(playgroundTemplatePath, templateFile);
      const code = fs.readFileSync(templatePath, { encoding: 'utf-8' });
      const res = babel.parseSync(code, { filename: templateFile });
      const meta = { name: id };
      babel.traverse(res, {
        VariableDeclarator(path) {
          if (
            babel.types.isIdentifier(path.node.id, { name: 'meta' }) &&
            path.node.init &&
            babel.types.isObjectExpression(path.node.init)
          ) {
            path.node.init.properties.forEach(property => {
              if (
                babel.types.isProperty(property) &&
                babel.types.isIdentifier(property.key) &&
                (babel.types.isStringLiteral(property.value) || babel.types.isBooleanLiteral(property.value))
              ) {
                meta[property.key.name] = property.value.value;
              }
            });
          }
        },
      });

      /** @type { {type: 'link'; label: string; href: string }} */
      const sidebarItem = {
        type: 'link',
        label: meta.name,
        href: `/try-it-out#${id}`,
      };

      return sidebarItem;
    })
    .filter(Boolean);
}

/** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
const sidebars = {
  reactSidebar: [{ type: 'autogenerated', dirName: 'react' }],
  tryItOutSidebar: generateTryItOutSidebar(),
};

module.exports = sidebars;
